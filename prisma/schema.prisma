// This is your Prisma schema file,
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  embosser
  manufacturer
  user
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          Role      @default(user)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  activities    Activity[] // Add the opposite relation field here
}

model Activity {
  id        String   @id @default(uuid())
  action    Action
  user_id   String   // Correct field name
  user      User     @relation(fields: [user_id], references: [id]) // Relation to User
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Dvplates {
  id               String    @id @default(uuid())
  dv_plate_number  String    @unique
  serial_number    String    @unique
  creation_date    String?
  description      String?
  insertedAt       DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  batchId          String    // Foreign key to Dvbatches
  batchDetails     Dvbatches @relation(fields: [batchId], references: [id]) // Relation to Dvbatches
}

model Dvbatches {
  id             String    @id @default(uuid())
  batch_number   String    @unique
  requested_by   String?
  status         String?
  description    String?
  total_dvplates Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  manufacturerId String?
  dvplates       Dvplates[]
  BatchHistory BatchHistory[]
}

model BatchHistory {
  id         String   @id @default(uuid())
  batchId    String
  status     String
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  batch      Dvbatches @relation(fields: [batchId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
}

model manufacturers {
  id                String       @id @default(uuid())
  manufacturer_name String       @unique
  address           String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  contactPersons    ContactPerson[] // One-to-many relation (a manufacturer has many contact persons)
}

model ContactPerson {
  id                   String       @id @default(uuid())
  contact_person_name  String       @unique
  email                String       @unique
  phone_number         String?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  manufacturerId       String?
  manufacturer         manufacturers? @relation(fields: [manufacturerId], references: [id]) // Make relation optional
}

enum Action {
  CREATE
  UPDATE
  DELETE
  LOGIN_ATTEMPT
  LOGIN_SUCCESSFUL
  LOGIN_FAILURE
  LOGOUT
  FORGOT_PASSWORD_ATTEMPT
  LOGIN_STATUS_CHANGE
}
